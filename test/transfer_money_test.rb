require 'minitest/autorun'
require './lib/player_class'
require './lib/game_class'
class DiceTest < Minitest::Test
  def test_transfer_money
    roll_map = [
      'ヒフミ','目なし',
      '通常の目(1)','通常の目(2)','通常の目(3)',
      '通常の目(4)','通常の目(5)','通常の目(6)',
      'シゴロ','ゾロ目','ピンゾロ'
    ]
    # dividend_table = [
    #   -2,-1,
    #   1,1,1,
    #   1,1,1,
    #   2,3,5
    # ]
    win_lose_map = [
      ['引き分け','負け','負け','負け','負け','負け','負け','負け','負け','負け','負け'],
      ['勝ち','引き分け','負け','負け','負け','負け','負け','負け','負け','負け','負け'],
      ['勝ち','勝ち','引き分け','負け','負け','負け','負け','負け','負け','負け','負け'],
      ['勝ち','勝ち','勝ち','引き分け','負け','負け','負け','負け','負け','負け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','引き分け','負け','負け','負け','負け','負け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','勝ち','引き分け','負け','負け','負け','負け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','引き分け','負け','負け','負け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','引き分け','負け','負け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','引き分け','負け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','引き分け','負け'],
      ['勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','勝ち','引き分け']
    ]
    bet_map = [
      [0,-2,-2,-2,-2,-2,-2,-2,-2,-3,-5],
      [2,0,-1,-1,-1,-1,-1,-1,-2,-3,-5],
      [2,1,0,-1,-1,-1,-1,-1,-2,-3,-5],
      [2,1,1,0,-1,-1,-1,-1,-2,-3,-5],
      [2,1,1,1,0,-1,-1,-1,-2,-3,-5],
      [2,1,1,1,1,0,-1,-1,-2,-3,-5],
      [2,1,1,1,1,1,0,-1,-2,-3,-5],
      [2,1,1,1,1,1,1,0,-2,-3,-5],
      [2,2,2,2,2,2,2,2,0,-3,-5],
      [3,3,3,3,3,3,3,3,3,0,-5],
      [5,5,5,5,5,5,5,5,5,5,0]
    ]
    player_A = Player.new(money:1000,bet_money:100,hand:'目なし',name:'カイジ')
    player_B = Player.new(money:1000,bet_money:300,hand:'目なし',name:'班長')
    game = Game.new
    new_bet_map = bet_map.map { |x|
      x.map { |y| 
        if y > 0
          y * player_A.bet_money
        elsif y < 0
          y * player_B.bet_money
        else
          y = 0
        end
      }
    }

    #new_bet_map.each {|x| puts x.join(" ")}

    roll_map.each_with_index do |value_1, i|
      player_A.hand = value_1
      roll_map.each_with_index do |value_2, j|
        player_B.hand = value_2
        # assert_equal new_bet_map[i][j], player_A.transfer_money(player_B,win_lose_map[i][j])
        assert_equal new_bet_map[i][j], game.transfer_money(player_A,player_B,win_lose_map[i][j])
      end
    end

  end
end